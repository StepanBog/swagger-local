const http = require('http');
const fs = require('fs').promises;
const path = require('path');
const url = require('url');

const PORT = process.env.PORT || 3000;

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞
function getMimeType(filename) {
    if (filename.endsWith('.html')) return 'text/html';
    if (filename.endsWith('.css')) return 'text/css';
    if (filename.endsWith('.js')) return 'application/javascript';
    if (filename.endsWith('.json')) return 'application/json';
    if (filename.endsWith('.yaml') || filename.endsWith('.yml')) return 'application/yaml';
    return 'text/plain';
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const server = http.createServer(async (req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const pathname = parsedUrl.pathname;

    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    try {
        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (pathname === '/' || pathname === '/index.html') {
            const filePath = path.join(__dirname, 'index.html');
            const content = await fs.readFile(filePath, 'utf8');
            
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(content);
            return;
        }

        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è)
        if (pathname.startsWith('/static/')) {
            const filePath = path.join(__dirname, pathname);
            const content = await fs.readFile(filePath, 'utf8');
            const mimeType = getMimeType(filePath);
            
            res.writeHead(200, { 'Content-Type': mimeType });
            res.end(content);
            return;
        }

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        if (pathname === '/api/status' && req.method === 'GET') {
            const services = [
                { name: 'Swagger Editor', url: 'http://swagger-editor:8080', icon: '‚úèÔ∏è' },
                { name: 'Swagger UI', url: 'http://swagger-ui:8080', icon: 'üìñ' },
                { name: 'Auto-save Service', url: 'http://auto-save-service:3000', icon: 'üíæ' }
            ];

            const statusResults = [];

            for (const service of services) {
                try {
                    const response = await fetch(service.url, { method: 'HEAD' });
                    statusResults.push({
                        name: service.name,
                        url: service.url,
                        icon: service.icon,
                        status: 'online',
                        timestamp: new Date().toISOString()
                    });
                } catch (error) {
                    statusResults.push({
                        name: service.name,
                        url: service.url,
                        icon: service.icon,
                        status: 'offline',
                        timestamp: new Date().toISOString()
                    });
                }
            }

            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify(statusResults));
            return;
        }

        // API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        if (pathname === '/api/contracts' && req.method === 'GET') {
            try {
                const response = await fetch('http://swagger-editor:8080/contracts/');
                const contracts = await response.json();
                
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify(contracts));
            } catch (error) {
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Failed to fetch contracts' }));
            }
            return;
        }

        // –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ swagger-editor
        if (pathname.startsWith('/editor/')) {
            const targetPath = pathname.replace('/editor/', '/');
            const targetUrl = `http://swagger-editor:8080${targetPath}`;
            
            try {
                const response = await fetch(targetUrl);
                const content = await response.text();
                
                res.writeHead(response.status, { 'Content-Type': response.headers.get('content-type') || 'text/plain' });
                res.end(content);
            } catch (error) {
                res.writeHead(502, { 'Content-Type': 'text/plain' });
                res.end('Bad Gateway');
            }
            return;
        }

        // –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ swagger-ui
        if (pathname.startsWith('/ui/')) {
            const targetPath = pathname.replace('/ui/', '/');
            const targetUrl = `http://swagger-ui:8080${targetPath}`;
            
            try {
                const response = await fetch(targetUrl);
                const content = await response.text();
                
                res.writeHead(response.status, { 'Content-Type': response.headers.get('content-type') || 'text/plain' });
                res.end(content);
            } catch (error) {
                res.writeHead(502, { 'Content-Type': 'text/plain' });
                res.end('Bad Gateway');
            }
            return;
        }

        // 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        res.writeHead(404, { 'Content-Type': 'text/html' });
        res.end(`
            <html>
                <head><title>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title></head>
                <body>
                    <h1>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
                    <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
                    <a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                </body>
            </html>
        `);

    } catch (error) {
        console.error('Error handling request:', error);
        
        res.writeHead(500, { 'Content-Type': 'text/html' });
        res.end(`
            <html>
                <head><title>500 - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</title></head>
                <body>
                    <h1>500 - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1>
                    <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</p>
                    <a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
                </body>
            </html>
        `);
    }
});

server.listen(PORT, () => {
    console.log(`üöÄ –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:${PORT}`);
    console.log(`üìä API —Å—Ç–∞—Ç—É—Å–∞: http://localhost:${PORT}/api/status`);
    console.log(`üìÅ API –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: http://localhost:${PORT}/api/contracts`);
}); 